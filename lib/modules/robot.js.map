{"version":3,"sources":["../../src/modules/robot.js"],"names":["require","Robot","constructor","httpd","name","alias","enable","warnOnReplace","warnOnUnregistered","useCleanCache","registerMock","logger","process","env","HUBOT_LOG_LEVEL","loaded","eventLog","responses","receive","listen","respond","middleware","register","context","next","done","response","message","push","emit","listener","Object","getOwnPropertyNames","prototype","map","key","spy","stackTrace","loadFile","filepath","filename","path","file","call","event","args","shutdown","deregisterAll"],"mappings":"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","file":"robot.js","sourcesContent":["'use strict'\n\nimport sinon from 'sinon'\nimport mockery from 'mockery'\nimport { Robot as HubotRobot, CatchAllMessage } from 'hubot-async/es2015'\nimport MockLog from '../mocks/log'\nimport MockAdapter from '../mocks/adapter'\n\nrequire('coffee-script/register') // register extension for legacy coffee script\n\n/**\n * Extends Hubot with mocked response, events, logs and adapter loading.\n *\n * @param  {Boolean} httpd      Whether to enable the HTTP daemon.\n * @param  {string} name        Robot name, defaults to Hubot.\n * @param  {string} alias       Robot alias, defaults to null\n * @return {Robot}              The pretend robot\n */\nclass Robot extends HubotRobot {\n  constructor (httpd, name = 'hubot', alias = 'pretend') {\n    // replace robot required packages with mocks (adapter also replaces Response)\n    mockery.enable({ warnOnReplace: false, warnOnUnregistered: false, useCleanCache: true })\n    mockery.registerMock('hubot-pretend-adapter', MockAdapter)\n    mockery.registerMock('log', MockLog) // BUG: mockery can't replace log used in Robot require, as its private\n\n    super(null, 'pretend-adapter', httpd, name, alias)\n    this.logger = new MockLog(process.env.HUBOT_LOG_LEVEL) // TODO: remove this when log mockery issue resovled (should capture load logs)\n    this.loaded = []\n    this.eventLog = []\n    this.responses = {\n      receive: [],\n      listen: [],\n      respond: []\n    }\n\n    // allow tests to listen in on middleware stacks and record context response\n    // BUG: because it prepends a middleware piece, it could throw off some tests expecting a given number in the stack\n    // TODO: extend Middleware to listen on each piece's context, without adding a middleware\n    this.middleware.receive.register((context, next, done) => {\n      if (!(context.response.message instanceof CatchAllMessage)) {\n        this.responses.receive.push(context.response)\n      }\n      this.emit('receive', context)\n      return next()\n    })\n    this.middleware.listener.register((context, next, done) => {\n      if (!(context.response.message instanceof CatchAllMessage)) {\n        this.responses.listen.push(context.response)\n      }\n      this.emit('listen', context)\n      return next()\n    })\n    this.middleware.response.register((context, next, done) => {\n      this.responses.respond.push(context.response)\n      this.emit('respond', context)\n      return next()\n    })\n\n    // spy on all instance methods\n    Object.getOwnPropertyNames(HubotRobot.prototype).map(key => {\n      let spy = sinon.spy(this, key)\n      delete spy.stackTrace\n      /**\n       * BUG getting reems of unknown errors `at wrapMethod` from sinon.spy\n       * wasn't actually breaking anything so the temp fix is just to delete\n       * the stackTrace property for readability when logging spied objects\n       */\n    })\n  }\n\n  /**\n   * Loads a file in path (storing each for tests to compare).\n   *\n   * @param  {string} filepath Path on the filesystem\n   * @param  {string} filename Name of file at filepath\n   */\n  loadFile (filepath, filename) {\n    this.loaded.push({\n      path: filepath,\n      file: filename\n    })\n    HubotRobot.prototype.loadFile.call(this, filepath, filename)\n  }\n\n  /**\n   * A wrapper around the EventEmitter API to make usage (log events for testing).\n   *\n   * @param  {string} event The event name\n   * @param  {array} args   Arguments emitted by the event\n   */\n  emit (event, ...args) {\n    this.eventLog.push([event, args])\n    HubotRobot.prototype.emit.call(this, event, ...args)\n  }\n\n  /**\n   * Stop mockery replacements and do prototype shutdown.\n   */\n  shutdown () {\n    mockery.deregisterAll()\n    HubotRobot.prototype.shutdown.call(this)\n  }\n}\n\nexport default Robot\n"]}