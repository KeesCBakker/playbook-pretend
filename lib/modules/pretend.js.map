{"version":3,"sources":["../../src/modules/pretend.js"],"names":["process","env","PORT","EXPRESS_PORT","robot","users","rooms","scripts","defaults","httpd","name","alias","read","scriptPaths","Array","isArray","scriptPath","resolve","statSync","isDirectory","file","readdirSync","sort","push","path","dirname","basename","load","start","options","config","Object","assign","logLevel","HUBOT_LOG_LEVEL","map","r","room","u","user","run","shutdown","reset","clear","scriptsToLoad","differenceBy","loaded","isEqual","s","loadFile","userSend","message","adapter","receive","userEnter","enter","userLeave","leave","userPrivates","privateMessages","roomMessages","messages","filter","msg","drop","roomReceive","in","roomEnter","roomLeave","keys","includes","send","privates","lastIncoming","responses","incoming","slice","pop","lastOutgoing","outgoing","startup","http","observer","events","eventLog","log","logger","logs"],"mappings":"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","file":"pretend.js","sourcesContent":["'use strict'\n\nimport fs from 'fs'\nimport path from 'path'\nimport _ from 'lodash'\nimport Robot from './robot'\nimport User from './user'\nimport Room from './room'\n\n// prevent issues with default port in use\nif (!(process.env.PORT || process.env.EXPRESS_PORT)) process.env.PORT = '3000'\n\n// init vars\nlet robot, users, rooms, scripts\n\n// option fallbacks\nconst defaults = {\n  httpd: false,\n  name: 'hubot',\n  alias: false,\n  rooms: null,\n  users: null\n}\n\n/**\n * Read in scripts from path/s, will overwrite any previous reads\n * @param  {array|string} scriptPaths Paths to read for loading into hubot\n * @return {pretend}                  Self for chaining\n */\nfunction read (scriptPaths) {\n  scripts = []\n  if (!Array.isArray(scriptPaths)) scriptPaths = [scriptPaths]\n  for (let scriptPath of scriptPaths) {\n    // get scripts if file path given, or all from directory\n    scriptPath = path.resolve(scriptPath)\n    if (fs.statSync(scriptPath).isDirectory()) {\n      for (let file of fs.readdirSync(scriptPath).sort()) {\n        scripts.push({\n          path: scriptPath,\n          file: file\n        })\n      }\n    } else {\n      scripts.push({\n        path: path.dirname(scriptPath),\n        file: path.basename(scriptPath)\n      })\n    }\n  }\n\n  // robot, load scripts\n  load()\n\n  return this\n}\n\n/**\n * Start (or restart) collections and create pretend robot\n * @param  {Object} [options={}]     Config object, optional attributes:\n * @param  {boolean} [options.httpd] Enable server (default: false)\n * @param  {string} [options.name]   Robot name\n * @param  {string} [options.alias]  Robot alias\n * @param  {array} [options.rooms]   Room names to start with\n * @param  {array} [options.rooms]   User names to start with\n * @return {pretend}                 Self for chaining\n */\nfunction start (options = {}) {\n  let config = Object.assign({}, defaults, options)\n\n  // reset test user/room collections\n  users = {}\n  rooms = {}\n\n  // force a log level if given in options\n  if (options.logLevel) process.env.HUBOT_LOG_LEVEL = options.logLevel\n\n  // create robot\n  // TODO: update to options object when that happens in hubot core\n  robot = new Robot(config.httpd, config.name, config.alias)\n\n  // create users and rooms as per config options\n  if (config.rooms != null) config.rooms.map(r => room(r))\n  if (config.users != null) config.users.map(u => user(u))\n\n  // tell robot to load and go\n  robot.run() // run before load, so scripts can extend robot after pretend does\n  load()\n\n  return this\n}\n\n/**\n * Shortcut to robot shutdown\n * @return {pretend}             Self for chaining\n */\nfunction shutdown () {\n  if (robot) robot.shutdown()\n  reset()\n  return this\n}\n\n/**\n * Reset (or init) robot and collection vars, for after tests clean up\n */\nfunction reset () {\n  robot = null\n  users = {}\n  rooms = {}\n}\nreset()\n\n/**\n * Clear read-in scripts, to ensure nothing loaded on next `.start()`\n * @return {pretend}             Self for chaining\n */\nfunction clear () {\n  scripts = []\n  return this\n}\n\n/**\n * Load any read-in scripts (if robot created and script not already read)\n * @return {pretend}             Self for chaining\n */\nfunction load () {\n  if (robot === null) return\n  let scriptsToLoad = _.differenceBy(scripts, robot.loaded, _.isEqual)\n  scriptsToLoad.map(s => robot.loadFile(s.path, s.file))\n  return this\n}\n\n/**\n * Send message from a given user (through adapter)\n * @param  {User} user       The user\n * @param  {Message} message Hubot message object\n * @return {Promise}         Promise resolving when receive middleware complete\n */\nfunction userSend (user, message) {\n  return robot.adapter.receive(user, message)\n}\n\n/**\n * Send an enter message from a given user\n * @param  {User} user The user (assumes with room already set)\n * @return {Promise}   Promise resolving when receive middleware complete\n */\nfunction userEnter (user) {\n  return robot.adapter.enter(user)\n}\n\n/**\n * Send a leave message to robot from user\n * @param  {User} user The user (assumes with room already set)\n * @return {Promise}   Promise resolving when receive middleware complete\n */\nfunction userLeave (user) {\n  return robot.adapter.leave(user)\n}\n\n/**\n * Get any private message entries in adapter assigned to username\n * @param  {User} user The user\n * @return {array}     Private messages for user\n */\nfunction userPrivates (user) {\n  return robot.adapter.privateMessages[user.name]\n}\n\n/**\n * Get filtered array of given room's messages from adapter\n * @return {array} Messages [user, message] sent to room\n*/\nfunction roomMessages (room) {\n  let messages = _.filter(robot.adapter.messages, msg => msg[0] === room.name)\n  return _.map(messages, _.drop) // truncates room column from messages\n}\n\n/**\n * Send message through adapter, coming from given room and user\n * @param  {Room} room       Source room\n * @param  {User} user       Source user\n * @param  {Message} message The message\n * @return {Promise}         Promise resolving when receive middleware complete\n */\nfunction roomReceive (room, user, message) {\n  return robot.adapter.receive(user.in(room), message)\n}\n\n/**\n * Send enter message for given user in given room\n * @param  {Room} room       Source room\n * @param  {User} user       Source user\n * @return {Promise}         Promise resolving when receive middleware complete\n */\nfunction roomEnter (room, user) {\n  return userEnter(user.in(room))\n}\n\n/**\n * Send leave message for given user in given room\n * @param  {Room} room       Source room\n * @param  {User} user       Source user\n * @return {Promise}         Promise resolving when receive middleware complete\n */\nfunction roomLeave (room, user) {\n  return userLeave(user.in(room))\n}\n\n/**\n * Create or get existing user, for entering/leaving and sending messages\n * Extend with methods routing to pretend helpers with this user provided\n * @param  {string} name         Name for the user\n * @param  {Object} [options={}] Optional attributes for user\n * @return {MockUser}            A new mock user\n */\nfunction user (name, options = {}) {\n  if (!_(users).keys().includes(name)) {\n    options.name = name\n    let user = new User(options)\n    user.send = function (message) {\n      return userSend(this, message)\n    }\n    user.enter = function () {\n      return userEnter(this)\n    }\n    user.leave = function () {\n      return userLeave(this)\n    }\n    user.privates = function () {\n      return userPrivates(this)\n    }\n    users[name] = user\n  }\n  return users[name]\n}\n\n/**\n * Create or get existing room, for entering/leaving and receiving messages\n * Extend with methods routing to pretend helpers with this room provided\n * @param  {string} name Name for the room\n * @return {MockRoom}    A new room\n */\nfunction room (name) {\n  if (!_(rooms).keys().includes(name)) {\n    let room = new Room(name)\n    room.messages = function () {\n      return roomMessages(this)\n    }\n    room.receive = function (user, message) {\n      return roomReceive(this, user, message)\n    }\n    room.enter = function (user) {\n      return roomEnter(room, user)\n    }\n    room.leave = function (user) {\n      return roomLeave(this, user)\n    }\n    rooms[name] = (room)\n  }\n  return rooms[name]\n}\n\n/**\n * Helper, retrieves the latest res from user matching a listener\n * @return {Response} A Hubot Response object\n */\nfunction lastIncoming () {\n  return robot.responses.incoming.slice(-1).pop()\n}\n\n/**\n * Helper, retrieves the latest res from a hubot sent response\n * @return {Response} A Hubot Response object\n */\nfunction lastOutgoing () {\n  return robot.responses.outgoing.slice(-1).pop()\n}\n\n// Revealed API, uses getters to return current state of collections\nexport default {\n  startup: start, // support pre-release method\n  start: start,\n  read: read,\n  clear: clear,\n  load: load,\n  shutdown: shutdown,\n  user: user,\n  room: room,\n  lastIncoming: lastIncoming,\n  lastOutgoing: lastOutgoing,\n  get users () { return users },\n  get rooms () { return rooms },\n  get scripts () { return scripts },\n  get robot () { return robot },\n  get http () { return robot.http },\n  get adapter () { return robot.adapter },\n  get messages () { return robot.adapter.messages },\n  get observer () { return robot.adapter.observer },\n  get responses () { return robot.responses },\n  get events () { return robot.eventLog },\n  get log () { return robot.logger },\n  get logs () { return robot.logger.logs }\n}\n"]}