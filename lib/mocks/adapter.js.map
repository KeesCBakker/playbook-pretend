{"version":3,"sources":["../../src/mocks/adapter.js"],"names":["_this","MockAdapter","constructor","robot","name","observer","messages","get","privateMessages","run","Response","send","envelope","strings","str","record","room","unshift","push","reply","user","receive","text","Promise","resolve","enter","leave","response","message","match","sendPrivate","username","use"],"mappings":"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","file":"adapter.js","sourcesContent":["'use strict'\n\nimport { Adapter, TextMessage, EnterMessage, LeaveMessage } from 'hubot-async/es2015'\nimport Observer from '../modules/observer'\nimport MockResponse from './response'\n\nlet _this // to be adapter's `this`, for when method's `this` is bound to robot\n\n/**\n * Extends Hubot Adapter, routing messages to internal collections.\n *\n * @param  {Robot} @robot The robot instance\n * @return MockAdapter    A new mock adapter\n */\nclass MockAdapter extends Adapter {\n  constructor (robot) {\n    super(robot)\n    _this = this\n    this.name = 'pretend'\n    this.observer = new Observer([])\n    this.messages = this.observer.get()\n    this.privateMessages = []\n  }\n\n  /**\n   * Invoked by robot when running, for adapter to extend bot.\n   */\n  run () {\n    this.robot.Response = MockResponse\n  }\n\n  /**\n   * Record details of a send from hubot.\n   *\n   * NB: robot.send calls adapter.send with this bound to robot.\n   *\n   * @param  {Object} envelope   A Object with message, room and user details\n   * @param  {array} strings...  One or more Strings for each message to send\n  */\n  send (envelope, ...strings) {\n    for (let str of strings) {\n      let record = ['hubot', str]\n      if (envelope.room != null) record.unshift(envelope.room)\n      _this.messages.push(record)\n    }\n  }\n\n  /**\n   * Process and record details of a reply from hubot - prepends '@user '.\n   *\n   * @param  {Object} envelope   A Object with message, room and user details\n   * @param  {array} strings...  One or more Strings for each message to send\n  */\n  reply (envelope, ...strings) {\n    for (let str of strings) {\n      let record = ['hubot', `@${envelope.user.name} ${str}`]\n      if (envelope.room != null) record.unshift(envelope.room)\n      _this.messages.push(record)\n    }\n  }\n\n  /**\n   * Process and record details of received message.\n   *\n   * @param  {MockUser} user    Sender's user object\n   * @param  {string}   text    Message text\n   * @return Promise            Promise resolving when robot finished processing\n  */\n  receive (user, text) {\n    return new Promise(resolve => {\n      let record = [user.name, text]\n      if (user.room != null) record.unshift(user.room)\n      this.messages.push(record)\n      return this.robot.receive(new TextMessage(user, text), resolve)\n    })\n  }\n\n  /**\n   * Process an enter message from user (not stored in messages).\n   *\n   * @param  {User} user The entering user (assumes with room set)\n   * @return {Promise}   Promise resolving when receive middleware complete\n   */\n  enter (user) {\n    return new Promise(resolve => {\n      return this.robot.receive(new EnterMessage(user), resolve)\n    })\n  }\n\n  /**\n   * Process a leave message from user (not stored in messages).\n   *\n   * @param  {User} user The leaving user (assumes with room set)\n   * @return {Promise}   Promise resolving when receive middleware complete\n   */\n  leave (user) {\n    return new Promise(resolve => {\n      return this.robot.receive(new LeaveMessage(user), resolve)\n    })\n  }\n\n  /**\n   * Create a mock response, without processing it as received.\n   *\n   * @param  {User} user    The user for response to originate from\n   * @param  {string} text  Text for creating a message from user\n   * @return {MockResponse} The response object\n   */\n  response (user, text) {\n    let message = new TextMessage(user, text)\n    let match = text.match(/.*/)\n    return new MockResponse(this.robot, message, match)\n  }\n\n  /**\n   * Custom method used by some platform adapters to process private messages.\n   *\n   * @param  {Object} envelope   A Object with message, room and user details\n   * @param  {array} strings...  One or more Strings for each message to send\n   */\n  sendPrivate (envelope, ...strings) {\n    let username = envelope.user.name\n    if (!this.privateMessages[username]) this.privateMessages[username] = []\n    for (let str of strings) this.privateMessages[username].push(str)\n  }\n}\n\nexport default {\n  use: function (robot) {\n    return new MockAdapter(robot)\n  }\n}\n"]}