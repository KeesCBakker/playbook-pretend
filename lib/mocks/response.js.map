{"version":3,"sources":["../../src/mocks/response.js"],"names":["constructor","robot","message","match","Object","getOwnPropertyNames","prototype","map","key","spy","stackTrace","emit","sendPrivate","strings","adapter","envelope"],"mappings":"AAAA,a;;AAEA,8B;AACA,wC;;AAEA;;;;;AAKe,2BAAuB;AACpCA,cAAaC,KAAb,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AAClC,UAAMF,KAAN,EAAaC,OAAb,EAAsBC,KAAtB;AACA;AACAC,WAAOC,mBAAP,CAA2B,aAASC,SAApC,EAA+CC,GAA/C,CAAmDC,OAAO;AACxD,UAAIC,MAAM,gBAAMA,GAAN,CAAU,IAAV,EAAgBD,GAAhB,CAAV;AACA,aAAOC,IAAIC,UAAX,CAFwD,CAElC;AACvB,KAHD;AAIAT,UAAMU,IAAN,CAAW,UAAX,EAAuB,IAAvB;AACD;;AAED;;;;AAIAC,gBAAyB,sDAATC,OAAS,gDAATA,OAAS;AACvB,WAAO,uBAAKZ,KAAL,CAAWa,OAAX,EAAmBF,WAAnB,wBAA+B,KAAKG,QAApC,SAAiDF,OAAjD,EAAP;AACD,GAjBmC,C","file":"response.js","sourcesContent":["'use strict'\n\nimport sinon from 'sinon'\nimport { Response } from 'hubot-async/es2015'\n\n/**\n * Add response method spies and .sendPrivate routed to adapter method\n * @param  {array} strings...  Array of message text strings\n * @return MockResponse        New mock response instance\n */\nexport default class extends Response {\n  constructor (robot, message, match) {\n    super(robot, message, match)\n    // spy on all instance methods\n    Object.getOwnPropertyNames(Response.prototype).map(key => {\n      let spy = sinon.spy(this, key)\n      delete spy.stackTrace // remove verbose logging (see bug in robot.js)\n    })\n    robot.emit('response', this)\n  }\n\n  /**\n   * Custom method for some platform adapters to process private messages\n   * @param  {array} strings...  Array of message text strings\n   */\n  sendPrivate (...strings) {\n    return this.robot.adapter.sendPrivate(this.envelope, ...strings)\n  }\n}\n"]}